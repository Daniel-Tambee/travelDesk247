// TravelDesk247 Core Travel Booking Schema
// Focused on travel booking, user management, and operations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT & AUTHENTICATION
// ================================

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  phone          String?
  password       String?
  firstName      String
  lastName       String
  dateOfBirth    DateTime?
  nationality    String?
  passportNumber String?
  isActive       Boolean   @default(true)
  isVerified     Boolean   @default(false)
  emailVerified  DateTime?
  phoneVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Authentication
  sessions Session[]
  otpCodes OtpCode[]

  // Travel related
  bookings    Booking[]
  profiles    TravelerProfile[]
  preferences UserPreference[]

  // Corporate/BPO
  agentProfile     Agent?
  corporateProfile CorporateUser?

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  type      OtpType
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model TravelerProfile {
  id                String    @id @default(cuid())
  userId            String
  profileName       String
  isDefault         Boolean   @default(false)
  passportNumber    String?
  passportExpiry    DateTime?
  issuingCountry    String?
  frequentFlyer     Json? // Store FF numbers for different airlines
  emergencyContact  Json? // Emergency contact details
  dietaryReqs       String?
  accessibilityReqs String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("traveler_profiles")
}

// ================================
// CORPORATE & AGENT MANAGEMENT
// ================================

model Agent {
  id           String           @id @default(cuid())
  userId       String           @unique
  agentCode    String           @unique
  department   String?
  accessLevel  AgentAccessLevel @default(BASIC)
  isActive     Boolean          @default(true)
  supervisorId String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  supervisor   Agent?  @relation("AgentSupervisor", fields: [supervisorId], references: [id])
  subordinates Agent[] @relation("AgentSupervisor")

  // Agent activities
  handledBookings Booking[]
  agentActions    AgentAction[]
  workQueues      WorkQueue[]

  @@map("agents")
}

model CorporateUser {
  id            String   @id @default(cuid())
  userId        String   @unique
  companyId     String
  employeeId    String?
  costCenter    String?
  approvalLimit Decimal? @db.Decimal(10, 2)
  isApprover    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  bookings         Booking[]
  approvalRequests ApprovalRequest[]

  @@map("corporate_users")
}

model Company {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  contactEmail String
  contactPhone String?
  address      Json?
  paymentTerms String?
  creditLimit  Decimal? @db.Decimal(12, 2)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  users         CorporateUser[]
  bookings      Booking[]
  approvalRules ApprovalRule[]

  @@map("companies")
}

// ================================
// BOOKING & TRAVEL INVENTORY
// ================================

model Booking {
  id         String  @id @default(cuid())
  bookingRef String  @unique
  pnr        String? // Passenger Name Record
  userId     String
  profileId  String?
  agentId    String?
  companyId  String?

  status      BookingStatus @default(PENDING)
  totalAmount Decimal       @db.Decimal(10, 2)
  currency    String        @default("NGN")

  // Booking details
  bookingType BookingType
  travelDate  DateTime?
  returnDate  DateTime?
  passengers  Json // Array of passenger details

  // Corporate fields
  costCenter     String?
  projectCode    String?
  reasonCode     String?
  approvalStatus ApprovalStatus?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  cancelledAt DateTime?

  // Relations
  user    User             @relation(fields: [userId], references: [id])
  profile TravelerProfile? @relation(fields: [profileId], references: [id])
  agent   Agent?           @relation(fields: [agentId], references: [id])
  company Company?         @relation(fields: [companyId], references: [id])

  // Booking components
  flights  FlightBooking[]
  hotels   HotelBooking[]
  cars     CarBooking[]
  packages PackageBooking[]

  // Payment & processing
  payments      Payment[]
  approvals     ApprovalRequest[]
  modifications BookingModification[]
  CorporateUser CorporateUser[]

  @@map("bookings")
}

model FlightBooking {
  id            String   @id @default(cuid())
  bookingId     String
  airlineCode   String
  flightNumber  String
  departure     String // Airport code
  arrival       String // Airport code
  departureTime DateTime
  arrivalTime   DateTime
  cabin         String // Economy, Business, First
  fare          Decimal  @db.Decimal(10, 2)
  taxes         Decimal  @db.Decimal(10, 2)
  totalFare     Decimal  @db.Decimal(10, 2)
  ticketNumber  String?
  seatNumbers   Json? // Array of seat assignments
  baggage       Json? // Baggage allowance details

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("flight_bookings")
}

model HotelBooking {
  id                 String   @id @default(cuid())
  bookingId          String
  hotelCode          String
  hotelName          String
  checkIn            DateTime
  checkOut           DateTime
  roomType           String
  numberOfRooms      Int      @default(1)
  ratePerNight       Decimal  @db.Decimal(10, 2)
  totalRate          Decimal  @db.Decimal(10, 2)
  taxes              Decimal  @db.Decimal(10, 2)
  confirmationNumber String?
  specialRequests    String?

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("hotel_bookings")
}

model CarBooking {
  id                 String   @id @default(cuid())
  bookingId          String
  vendorCode         String
  vehicleCategory    String
  pickupLocation     String
  dropoffLocation    String
  pickupDateTime     DateTime
  dropoffDateTime    DateTime
  dailyRate          Decimal  @db.Decimal(10, 2)
  totalRate          Decimal  @db.Decimal(10, 2)
  confirmationNumber String?

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("car_bookings")
}

model PackageBooking {
  id          String   @id @default(cuid())
  bookingId   String
  packageCode String
  packageName String
  destination String
  startDate   DateTime
  endDate     DateTime
  inclusions  Json // What's included in package
  totalCost   Decimal  @db.Decimal(10, 2)

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("package_bookings")
}

// ================================
// PAYMENT & FINANCIAL
// ================================

model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  paymentIntentId String? // Stripe Payment Intent ID
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("NGN")
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod
  gatewayResponse Json? // Store gateway response
  failureReason   String?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// ================================
// APPROVAL WORKFLOWS
// ================================

model ApprovalRule {
  id          String           @id @default(cuid())
  companyId   String
  ruleType    ApprovalRuleType
  threshold   Decimal?         @db.Decimal(10, 2)
  approverIds Json // Array of user IDs who can approve
  conditions  Json? // Additional conditions
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("approval_rules")
}

model ApprovalRequest {
  id          String         @id @default(cuid())
  bookingId   String
  requesterId String
  approverId  String?
  status      ApprovalStatus @default(PENDING)
  comments    String?
  requestedAt DateTime       @default(now())
  reviewedAt  DateTime?

  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  requester CorporateUser @relation(fields: [requesterId], references: [id])

  @@map("approval_requests")
}

// ================================
// WORK QUEUE & AGENT OPERATIONS
// ================================

model WorkQueue {
  id          String      @id @default(cuid())
  agentId     String
  queueType   QueueType
  priority    Priority    @default(MEDIUM)
  title       String
  description String?
  bookingId   String?
  status      QueueStatus @default(OPEN)
  assignedAt  DateTime    @default(now())
  completedAt DateTime?

  agent Agent @relation(fields: [agentId], references: [id])

  @@map("work_queues")
}

model AgentAction {
  id         String          @id @default(cuid())
  agentId    String
  action     AgentActionType
  entityType String // booking, payment, user, etc.
  entityId   String // ID of the entity
  details    Json? // Action details
  timestamp  DateTime        @default(now())

  agent Agent @relation(fields: [agentId], references: [id])

  @@map("agent_actions")
}

model BookingModification {
  id         String   @id @default(cuid())
  bookingId  String
  changeType String // flight_change, hotel_change, cancellation, etc.
  oldData    Json // Previous booking data
  newData    Json // New booking data
  reason     String?
  fees       Decimal? @db.Decimal(10, 2)
  modifiedBy String // User ID who made the change
  modifiedAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_modifications")
}

// ================================
// SYSTEM & CONFIGURATION
// ================================

model UserPreference {
  id       String @id @default(cuid())
  userId   String
  category String // travel, notification, etc.
  key      String
  value    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, key])
  @@map("user_preferences")
}

model SystemConfiguration {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String // payment, integration, etc.
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configurations")
}

model ProviderConfiguration {
  id           String   @id @default(cuid())
  providerName String // Amadeus, Sabre, Stripe, etc.
  providerType String // GDS, Payment, Hotel, Car
  config       Json // API keys, endpoints, settings
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("provider_configurations")
}

// ================================
// DESTINATIONS & CONTENT
// ================================

model Destination {
  id          String   @id @default(cuid())
  code        String   @unique // Airport/city code
  name        String
  city        String
  country     String
  timezone    String?
  coordinates Json? // Latitude/longitude
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("destinations")
}

model Hotel {
  id          String   @id @default(cuid())
  hotelCode   String   @unique
  name        String
  address     Json
  city        String
  country     String
  starRating  Int?
  amenities   Json? // List of amenities
  images      Json? // Array of image URLs
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hotels")
}

model Airline {
  id        String   @id @default(cuid())
  code      String   @unique // IATA code
  name      String
  logoUrl   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("airlines")
}

// ================================
// ENUMS
// ================================

enum OtpType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  LOGIN
  PASSWORD_RESET
}

enum AgentAccessLevel {
  BASIC
  SUPERVISOR
  MANAGER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  FAILED
}

enum BookingType {
  FLIGHT
  HOTEL
  CAR
  PACKAGE
  MULTI_COMPONENT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CORPORATE_CREDIT
  WALLET
}

enum ApprovalRuleType {
  AMOUNT_THRESHOLD
  DESTINATION_RESTRICTION
  ADVANCE_BOOKING
  TRAVEL_CLASS
}

enum QueueType {
  BOOKING_ISSUE
  PAYMENT_PROBLEM
  REFUND_REQUEST
  CHANGE_REQUEST
  CUSTOMER_COMPLAINT
}

enum QueueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ESCALATED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AgentActionType {
  BOOKING_CREATED
  BOOKING_MODIFIED
  BOOKING_CANCELLED
  PAYMENT_PROCESSED
  REFUND_ISSUED
  QUEUE_ASSIGNED
  QUEUE_RESOLVED
  USER_CONTACTED
}
